from sqlalchemy import create_engine, Column, Integer, String, Float
from sqlalchemy.orm import declarative_base, sessionmaker
from sqlalchemy.exc import IntegrityError
from sqlalchemy import text  # Import for escaping special characters
import urllib.parse  # Import for URL encoding

# Define the base class for database models
Base = declarative_base()

# Define the CarDB class representing a car entry in the database
class CarDB(Base):
    __tablename__ = 'cars'  # Name of the table in the database

    id = Column(Integer, primary_key=True)
    make = Column(String)
    model = Column(String)
    year = Column(Integer)
    fuel_type = Column(String)
    mileage = Column(Integer)
    url = Column(String(255))  # Change data type to VARCHAR(255)
    location = Column(String)  # Added location column
    trans = Column(String)  # Added transmission column

    def __str__(self):
        return f"{self.make} {self.model} ({self.year}) {self.fuel_type} {self.mileage}L {self.url} {self.location} {self.trans})"
    
def create_db_table(db_name="cars.db"):
    """
    Creates database tables (if they don't exist).

    Args:
        db_name (str, optional): The desired name of the database file. Defaults to "cars.db".
    """

    # Create the engine and database connection
    engine = create_engine(f'sqlite:///{db_name}')

    # Create tables if they don't exist
    print("Creating tables (if necessary)...")
    try:
        Base.metadata.create_all(engine)
        print("Tables created successfully!")
    except Exception as e:
        print(f"Error creating tables: {e}")

# Function to get user input for car details
def get_user_input():
    """
    Prompts the user for car details and returns a dictionary.

    Returns:
        dict: Dictionary containing car information.
    """

    make = input("Enter car make: ")
    model = input("Enter car model: ").strip()  # Remove trailing spaces from model
    year = int(input("Enter car year: "))
    mileage = int(input("Enter car mileage (if available): "))
    fuel_type = input("Enter car fuel type: ")
    url = input("Enter car listing URL (optional): ").strip()

    # Encode the URL (recommended)
    encoded_url = urllib.parse.quote(url)  # Encode special characters

    location = input("Enter car location (optional): ")  # Added location input
    trans = input("Enter car transmission (optional): ")  # Added transmission input

    return {
        "make": make,
        "model": model,
        "year": year,
        "mileage": mileage,
        "fuel_type": fuel_type,
        "url": encoded_url,
        "location": location,
        "trans": trans,
    }

# Function to add car data to the database
def add_car_to_db(db_name="cars.db", car_data=None):
    """
    Inserts car data into the database.

    Args:
        db_name (str, optional): The desired name of the database file. Defaults to "cars.db".
        car_data (dict, optional): Dictionary containing car information. Defaults to None.

    Raises:
        ValueError: If no car data is provided.
    """

    if car_data is None:
        raise ValueError("No car data provided!")

    # Import database session logic
    from sqlalchemy.orm import sessionmaker

    # Create the engine and database connection
    engine = create_engine(f'sqlite:///{db_name}')

    # Create a database session
    Session = sessionmaker(bind=engine)
    session = Session()

    # Create a CarDB object from the car data
    new_car = CarDB(**car_data)  # Unpack dictionary using double asterisk

    # Add the new car object to the session
    session.add(new_car)

    # Commit changes to the database
    try:
        session.commit()
        print("Car added to database successfully!")
    except IntegrityError as e:
        print(f"Error adding car: {e} (possible duplicate entry)")
    except Exception as e:
        print(f"Error adding car to database: {e}")
        session.rollback()  # Rollback in case of errors
    finally:
        session.close()  # Always close the session

create_db_table()
# Get user input for car details
car_data = get_user_input()

# Add the car to the database
add_car_to_db(car_data=car_data)
